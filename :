# coding=utf-8
import sqlite3
import sys
import re
from model import Model
class Person(Model):
    def __init__(self):
        self.con=sqlite3.connect(self.mydb)
        self.con.row_factory = sqlite3.Row
        self.cur=self.con.cursor()
        self.cur.execute("""create table if not exists person(
        id integer primary key autoincrement,
        name text,
            pic text,
            country_id text
                    );""")
        self.con.commit()
        #self.con.close()
    def gettrois(self):
        self.cur.execute("select person.*,pays.code from person left join country pays on pays.id = person.country_id ORDER BY RANDOM() LIMIT 3")

        row=self.cur.fetchall()
        return row
    def getallparjob(self)
        self.cur.execute("select event.id, event.stuff_id,stuff.name as name, count(distinct moussaillons.person_id) as nombre from event left join moussaillons on moussaillons.event_id = event.id left join stuff on stuff.id = event.stuff_id group by event.stuff_id")

        row=self.cur.fetchall()
        return row
    def getallparpays(self):
        self.cur.execute("select country.*,count(person.id) as nombre from country left join person on person.country_id = country.id group by country.id")

        row=self.cur.fetchall()
        return row
    def getallbyname(self,hey):
        self.cur.execute("select person.*,pays.code from person left join country pays on pays.id = person.country_id where lower(person.name) like ?",(("%"+hey.replace(" ","%").lower()+"%"),))

        row=self.cur.fetchall()
        return row
    def getall(self):
        self.cur.execute("select person.*,pays.code from person left join country pays on pays.id = person.country_id ")

        row=self.cur.fetchall()
        return row
    def deletebyid(self,myid):

        self.cur.execute("delete from person where id = ?",(myid,))
        job=self.cur.fetchall()
        self.con.commit()
        return None
    def getbyid(self,myid):
        self.cur.execute("select person.* ,pays.code from person left join country pays on pays.id = person.country_id where person.id = ?",(myid,))
        row=dict(self.cur.fetchone())
        print(row["id"], "row id")
        job=self.cur.fetchall()
        return row
    def create(self,params):
        print("ok")
        myhash={}
        for x in params:
            if 'confirmation' in x:
                continue
            if 'envoyer' in x:
                continue
            if '[' not in x and x not in ['routeparams']:
                #print("my params",x,params[x])
                try:
                  myhash[x]=str(params[x].decode())
                except:
                  myhash[x]=str(params[x])
        print("M Y H A S H")
        print(myhash,myhash.keys())
        myid=None
        try:
          self.cur.execute("insert into person (name,pic,country_id) values (:name,:pic,:country_id)",myhash)
          self.con.commit()
          myid=str(self.cur.lastrowid)
        except Exception as e:
          print("my error"+str(e))
        azerty={}
        azerty["person_id"]=myid
        azerty["notice"]="votre person a été ajouté"
        return azerty




